import 'extension.dart';
import 'fhir_object_factory.dart';
import 'element.dart';
import 'coding.dart';
import 'element_definition_slicing.dart';
import 'element_definition_base.dart';
import 'element_definition_type.dart';
import 'address.dart';
import 'age.dart';
import 'annotation.dart';
import 'attachment.dart';
import 'codeable_concept.dart';
import 'contact_point.dart';
import 'count.dart';
import 'distance.dart';
import 'duration.dart';
import 'human_name.dart';
import 'identifier.dart';
import 'money.dart';
import 'period.dart';
import 'quantity.dart';
import 'range.dart';
import 'ratio.dart';
import 'reference.dart';
import 'sampled_data.dart';
import 'signature.dart';
import 'timing.dart';
import 'contact_detail.dart';
import 'contributor.dart';
import 'data_requirement.dart';
import 'expression.dart';
import 'parameter_definition.dart';
import 'related_artifact.dart';
import 'trigger_definition.dart';
import 'usage_context.dart';
import 'dosage.dart';
import 'element_definition_example.dart';
import 'element_definition_constraint.dart';
import 'element_definition_binding.dart';
import 'element_definition_mapping.dart';
/// Captures constraints on each element within the resource, profile, or extension.
class ElementDefinition {
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    String id;
    /// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
    List<Extension> extension;
    /// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
    /// 
    /// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
    List<Extension> modifierExtension;
    /// The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
    String path;
    /// Extensions for path
    Element extPath;
    /// Extensions for representation
    List<Element> extRepresentation;
    /// The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
    String sliceName;
    /// Extensions for sliceName
    Element extSliceName;
    /// If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
    bool sliceIsConstraining;
    /// Extensions for sliceIsConstraining
    Element extSliceIsConstraining;
    /// A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
    String label;
    /// Extensions for label
    Element extLabel;
    /// A code that has the same meaning as the element in a particular terminology.
    List<Coding> code;
    /// Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
    ElementDefinitionSlicing slicing;
    /// A concise description of what this element means (e.g. for use in autogenerated summaries).
    String short;
    /// Extensions for short
    Element extShort;
    /// Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
    String definition;
    /// Extensions for definition
    Element extDefinition;
    /// Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
    String comment;
    /// Extensions for comment
    Element extComment;
    /// This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
    String requirements;
    /// Extensions for requirements
    Element extRequirements;
    /// Identifies additional names by which this element might also be known.
    List<String> alias;
    /// Extensions for alias
    List<Element> extAlias;
    /// The minimum number of times this element SHALL appear in the instance.
    int min;
    /// Extensions for min
    Element extMin;
    /// The maximum number of times this element is permitted to appear in the instance.
    String max;
    /// Extensions for max
    Element extMax;
    /// Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
    ElementDefinitionBase base;
    /// Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
    String contentReference;
    /// Extensions for contentReference
    Element extContentReference;
    /// The data type or resource that the value of this element is permitted to be.
    List<ElementDefinitionType> type;
    /// Extensions for defaultValueBase64Binary
    Element extDefaultValueBase64Binary;
    /// Extensions for defaultValueBoolean
    Element extDefaultValueBoolean;
    /// Extensions for defaultValueCanonical
    Element extDefaultValueCanonical;
    /// Extensions for defaultValueCode
    Element extDefaultValueCode;
    /// Extensions for defaultValueDate
    Element extDefaultValueDate;
    /// Extensions for defaultValueDateTime
    Element extDefaultValueDateTime;
    /// Extensions for defaultValueDecimal
    Element extDefaultValueDecimal;
    /// Extensions for defaultValueId
    Element extDefaultValueId;
    /// Extensions for defaultValueInstant
    Element extDefaultValueInstant;
    /// Extensions for defaultValueInteger
    Element extDefaultValueInteger;
    /// Extensions for defaultValueMarkdown
    Element extDefaultValueMarkdown;
    /// Extensions for defaultValueOid
    Element extDefaultValueOid;
    /// Extensions for defaultValuePositiveInt
    Element extDefaultValuePositiveInt;
    /// Extensions for defaultValueString
    Element extDefaultValueString;
    /// Extensions for defaultValueTime
    Element extDefaultValueTime;
    /// Extensions for defaultValueUnsignedInt
    Element extDefaultValueUnsignedInt;
    /// Extensions for defaultValueUri
    Element extDefaultValueUri;
    /// Extensions for defaultValueUrl
    Element extDefaultValueUrl;
    /// Extensions for defaultValueUuid
    Element extDefaultValueUuid;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Address defaultValueAddress;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Age defaultValueAge;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Annotation defaultValueAnnotation;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Attachment defaultValueAttachment;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    CodeableConcept defaultValueCodeableConcept;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Coding defaultValueCoding;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    ContactPoint defaultValueContactPoint;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Count defaultValueCount;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Distance defaultValueDistance;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Duration defaultValueDuration;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    HumanName defaultValueHumanName;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Identifier defaultValueIdentifier;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Money defaultValueMoney;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Period defaultValuePeriod;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Quantity defaultValueQuantity;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Range defaultValueRange;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Ratio defaultValueRatio;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Reference defaultValueReference;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    SampledData defaultValueSampledData;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Signature defaultValueSignature;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Timing defaultValueTiming;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    ContactDetail defaultValueContactDetail;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Contributor defaultValueContributor;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    DataRequirement defaultValueDataRequirement;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Expression defaultValueExpression;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    ParameterDefinition defaultValueParameterDefinition;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    RelatedArtifact defaultValueRelatedArtifact;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    TriggerDefinition defaultValueTriggerDefinition;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    UsageContext defaultValueUsageContext;
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    Dosage defaultValueDosage;
    /// The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
    String meaningWhenMissing;
    /// Extensions for meaningWhenMissing
    Element extMeaningWhenMissing;
    /// If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
    String orderMeaning;
    /// Extensions for orderMeaning
    Element extOrderMeaning;
    /// Extensions for fixedBase64Binary
    Element extFixedBase64Binary;
    /// Extensions for fixedBoolean
    Element extFixedBoolean;
    /// Extensions for fixedCanonical
    Element extFixedCanonical;
    /// Extensions for fixedCode
    Element extFixedCode;
    /// Extensions for fixedDate
    Element extFixedDate;
    /// Extensions for fixedDateTime
    Element extFixedDateTime;
    /// Extensions for fixedDecimal
    Element extFixedDecimal;
    /// Extensions for fixedId
    Element extFixedId;
    /// Extensions for fixedInstant
    Element extFixedInstant;
    /// Extensions for fixedInteger
    Element extFixedInteger;
    /// Extensions for fixedMarkdown
    Element extFixedMarkdown;
    /// Extensions for fixedOid
    Element extFixedOid;
    /// Extensions for fixedPositiveInt
    Element extFixedPositiveInt;
    /// Extensions for fixedString
    Element extFixedString;
    /// Extensions for fixedTime
    Element extFixedTime;
    /// Extensions for fixedUnsignedInt
    Element extFixedUnsignedInt;
    /// Extensions for fixedUri
    Element extFixedUri;
    /// Extensions for fixedUrl
    Element extFixedUrl;
    /// Extensions for fixedUuid
    Element extFixedUuid;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Address fixedAddress;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Age fixedAge;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Annotation fixedAnnotation;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Attachment fixedAttachment;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    CodeableConcept fixedCodeableConcept;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Coding fixedCoding;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    ContactPoint fixedContactPoint;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Count fixedCount;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Distance fixedDistance;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Duration fixedDuration;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    HumanName fixedHumanName;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Identifier fixedIdentifier;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Money fixedMoney;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Period fixedPeriod;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Quantity fixedQuantity;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Range fixedRange;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Ratio fixedRatio;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Reference fixedReference;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    SampledData fixedSampledData;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Signature fixedSignature;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Timing fixedTiming;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    ContactDetail fixedContactDetail;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Contributor fixedContributor;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    DataRequirement fixedDataRequirement;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Expression fixedExpression;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    ParameterDefinition fixedParameterDefinition;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    RelatedArtifact fixedRelatedArtifact;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    TriggerDefinition fixedTriggerDefinition;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    UsageContext fixedUsageContext;
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    Dosage fixedDosage;
    /// Extensions for patternBase64Binary
    Element extPatternBase64Binary;
    /// Extensions for patternBoolean
    Element extPatternBoolean;
    /// Extensions for patternCanonical
    Element extPatternCanonical;
    /// Extensions for patternCode
    Element extPatternCode;
    /// Extensions for patternDate
    Element extPatternDate;
    /// Extensions for patternDateTime
    Element extPatternDateTime;
    /// Extensions for patternDecimal
    Element extPatternDecimal;
    /// Extensions for patternId
    Element extPatternId;
    /// Extensions for patternInstant
    Element extPatternInstant;
    /// Extensions for patternInteger
    Element extPatternInteger;
    /// Extensions for patternMarkdown
    Element extPatternMarkdown;
    /// Extensions for patternOid
    Element extPatternOid;
    /// Extensions for patternPositiveInt
    Element extPatternPositiveInt;
    /// Extensions for patternString
    Element extPatternString;
    /// Extensions for patternTime
    Element extPatternTime;
    /// Extensions for patternUnsignedInt
    Element extPatternUnsignedInt;
    /// Extensions for patternUri
    Element extPatternUri;
    /// Extensions for patternUrl
    Element extPatternUrl;
    /// Extensions for patternUuid
    Element extPatternUuid;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Address patternAddress;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Age patternAge;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Annotation patternAnnotation;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Attachment patternAttachment;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    CodeableConcept patternCodeableConcept;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Coding patternCoding;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    ContactPoint patternContactPoint;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Count patternCount;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Distance patternDistance;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Duration patternDuration;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    HumanName patternHumanName;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Identifier patternIdentifier;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Money patternMoney;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Period patternPeriod;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Quantity patternQuantity;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Range patternRange;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Ratio patternRatio;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Reference patternReference;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    SampledData patternSampledData;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Signature patternSignature;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Timing patternTiming;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    ContactDetail patternContactDetail;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Contributor patternContributor;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    DataRequirement patternDataRequirement;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Expression patternExpression;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    ParameterDefinition patternParameterDefinition;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    RelatedArtifact patternRelatedArtifact;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    TriggerDefinition patternTriggerDefinition;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    UsageContext patternUsageContext;
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
    /// 
    /// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
    /// 
    /// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
    /// 
    /// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
    /// 
    /// 1. If primitive: it must match exactly the pattern value
    /// 2. If a complex object: it must match (recursively) the pattern value
    /// 3. If an array: it must match (recursively) the pattern value.
    Dosage patternDosage;
    /// A sample value for this element demonstrating the type of information that would typically be found in the element.
    List<ElementDefinitionExample> example;
    /// Extensions for minValueDate
    Element extMinValueDate;
    /// Extensions for minValueDateTime
    Element extMinValueDateTime;
    /// Extensions for minValueInstant
    Element extMinValueInstant;
    /// Extensions for minValueTime
    Element extMinValueTime;
    /// Extensions for minValueDecimal
    Element extMinValueDecimal;
    /// Extensions for minValueInteger
    Element extMinValueInteger;
    /// Extensions for minValuePositiveInt
    Element extMinValuePositiveInt;
    /// Extensions for minValueUnsignedInt
    Element extMinValueUnsignedInt;
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    Quantity minValueQuantity;
    /// Extensions for maxValueDate
    Element extMaxValueDate;
    /// Extensions for maxValueDateTime
    Element extMaxValueDateTime;
    /// Extensions for maxValueInstant
    Element extMaxValueInstant;
    /// Extensions for maxValueTime
    Element extMaxValueTime;
    /// Extensions for maxValueDecimal
    Element extMaxValueDecimal;
    /// Extensions for maxValueInteger
    Element extMaxValueInteger;
    /// Extensions for maxValuePositiveInt
    Element extMaxValuePositiveInt;
    /// Extensions for maxValueUnsignedInt
    Element extMaxValueUnsignedInt;
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    Quantity maxValueQuantity;
    /// Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
    int maxLength;
    /// Extensions for maxLength
    Element extMaxLength;
    /// A reference to an invariant that may make additional statements about the cardinality or value in the instance.
    List<String> condition;
    /// Extensions for condition
    List<Element> extCondition;
    /// Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
    List<ElementDefinitionConstraint> constraint;
    /// If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
    bool mustSupport;
    /// Extensions for mustSupport
    Element extMustSupport;
    /// If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
    bool isModifier;
    /// Extensions for isModifier
    Element extIsModifier;
    /// Explains how that element affects the interpretation of the resource or element that contains it.
    String isModifierReason;
    /// Extensions for isModifierReason
    Element extIsModifierReason;
    /// Whether the element should be included if a client requests a search with the parameter _summary=true.
    bool isSummary;
    /// Extensions for isSummary
    Element extIsSummary;
    /// Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
    ElementDefinitionBinding binding;
    /// Identifies a concept from an external specification that roughly corresponds to this element.
    List<ElementDefinitionMapping> mapping;
 
    ElementDefinition.fromJSON( Map json ){
        this.id = json['id'];
        this.extension = List<Extension>();
        if (json['extension'] != null && json['extension'].length > 0) {
          if( json['extension'] is List ){
            json['extension'].forEach((i){
              this.extension.add(FHIRObjectFactory.buildFromJSON('Extension', i));
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['extension'];
            this.extension.add(FHIRObjectFactory.buildFromJSON('Extension', i));
          }          
        }
        this.modifierExtension = List<Extension>();
        if (json['modifierExtension'] != null && json['modifierExtension'].length > 0) {
          if( json['modifierExtension'] is List ){
            json['modifierExtension'].forEach((i){
              this.modifierExtension.add(FHIRObjectFactory.buildFromJSON('Extension', i));
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['modifierExtension'];
            this.modifierExtension.add(FHIRObjectFactory.buildFromJSON('Extension', i));
          }          
        }
        this.path = json['path'];
        this.extPath = json['_path'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_path']);
        this.extRepresentation = List<Element>();
        if (json['_representation'] != null && json['_representation'].length > 0) {
          if( json['_representation'] is List ){
            json['_representation'].forEach((i){
              this.extRepresentation.add(FHIRObjectFactory.buildFromJSON('Element', i));
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['_representation'];
            this.extRepresentation.add(FHIRObjectFactory.buildFromJSON('Element', i));
          }          
        }
        this.sliceName = json['sliceName'];
        this.extSliceName = json['_sliceName'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_sliceName']);
        this.sliceIsConstraining = json['sliceIsConstraining'];
        this.extSliceIsConstraining = json['_sliceIsConstraining'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_sliceIsConstraining']);
        this.label = json['label'];
        this.extLabel = json['_label'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_label']);
        this.code = List<Coding>();
        if (json['code'] != null && json['code'].length > 0) {
          if( json['code'] is List ){
            json['code'].forEach((i){
              this.code.add(FHIRObjectFactory.buildFromJSON('Coding', i));
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['code'];
            this.code.add(FHIRObjectFactory.buildFromJSON('Coding', i));
          }          
        }
        this.slicing = json['slicing'] == null ? null : FHIRObjectFactory.buildFromJSON('ElementDefinitionSlicing', json['slicing']);
        this.short = json['short'];
        this.extShort = json['_short'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_short']);
        this.definition = json['definition'];
        this.extDefinition = json['_definition'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_definition']);
        this.comment = json['comment'];
        this.extComment = json['_comment'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_comment']);
        this.requirements = json['requirements'];
        this.extRequirements = json['_requirements'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_requirements']);
        this.alias = List<String>();
        if (json['alias'] != null && json['alias'].length > 0) {
          if( json['alias'] is List ){
            json['alias'].forEach((i){
              this.alias.add(i);
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['alias'];
            this.alias.add(i);
          }          
        }
        this.extAlias = List<Element>();
        if (json['_alias'] != null && json['_alias'].length > 0) {
          if( json['_alias'] is List ){
            json['_alias'].forEach((i){
              this.extAlias.add(FHIRObjectFactory.buildFromJSON('Element', i));
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['_alias'];
            this.extAlias.add(FHIRObjectFactory.buildFromJSON('Element', i));
          }          
        }
        this.min = json['min'];
        this.extMin = json['_min'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_min']);
        this.max = json['max'];
        this.extMax = json['_max'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_max']);
        this.base = json['base'] == null ? null : FHIRObjectFactory.buildFromJSON('ElementDefinitionBase', json['base']);
        this.contentReference = json['contentReference'];
        this.extContentReference = json['_contentReference'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_contentReference']);
        this.type = List<ElementDefinitionType>();
        if (json['type'] != null && json['type'].length > 0) {
          if( json['type'] is List ){
            json['type'].forEach((i){
              this.type.add(FHIRObjectFactory.buildFromJSON('ElementDefinitionType', i));
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['type'];
            this.type.add(FHIRObjectFactory.buildFromJSON('ElementDefinitionType', i));
          }          
        }
        this.extDefaultValueBase64Binary = json['_defaultValueBase64Binary'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueBase64Binary']);
        this.extDefaultValueBoolean = json['_defaultValueBoolean'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueBoolean']);
        this.extDefaultValueCanonical = json['_defaultValueCanonical'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueCanonical']);
        this.extDefaultValueCode = json['_defaultValueCode'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueCode']);
        this.extDefaultValueDate = json['_defaultValueDate'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueDate']);
        this.extDefaultValueDateTime = json['_defaultValueDateTime'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueDateTime']);
        this.extDefaultValueDecimal = json['_defaultValueDecimal'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueDecimal']);
        this.extDefaultValueId = json['_defaultValueId'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueId']);
        this.extDefaultValueInstant = json['_defaultValueInstant'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueInstant']);
        this.extDefaultValueInteger = json['_defaultValueInteger'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueInteger']);
        this.extDefaultValueMarkdown = json['_defaultValueMarkdown'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueMarkdown']);
        this.extDefaultValueOid = json['_defaultValueOid'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueOid']);
        this.extDefaultValuePositiveInt = json['_defaultValuePositiveInt'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValuePositiveInt']);
        this.extDefaultValueString = json['_defaultValueString'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueString']);
        this.extDefaultValueTime = json['_defaultValueTime'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueTime']);
        this.extDefaultValueUnsignedInt = json['_defaultValueUnsignedInt'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueUnsignedInt']);
        this.extDefaultValueUri = json['_defaultValueUri'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueUri']);
        this.extDefaultValueUrl = json['_defaultValueUrl'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueUrl']);
        this.extDefaultValueUuid = json['_defaultValueUuid'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_defaultValueUuid']);
        this.defaultValueAddress = json['defaultValueAddress'] == null ? null : FHIRObjectFactory.buildFromJSON('Address', json['defaultValueAddress']);
        this.defaultValueAge = json['defaultValueAge'] == null ? null : FHIRObjectFactory.buildFromJSON('Age', json['defaultValueAge']);
        this.defaultValueAnnotation = json['defaultValueAnnotation'] == null ? null : FHIRObjectFactory.buildFromJSON('Annotation', json['defaultValueAnnotation']);
        this.defaultValueAttachment = json['defaultValueAttachment'] == null ? null : FHIRObjectFactory.buildFromJSON('Attachment', json['defaultValueAttachment']);
        this.defaultValueCodeableConcept = json['defaultValueCodeableConcept'] == null ? null : FHIRObjectFactory.buildFromJSON('CodeableConcept', json['defaultValueCodeableConcept']);
        this.defaultValueCoding = json['defaultValueCoding'] == null ? null : FHIRObjectFactory.buildFromJSON('Coding', json['defaultValueCoding']);
        this.defaultValueContactPoint = json['defaultValueContactPoint'] == null ? null : FHIRObjectFactory.buildFromJSON('ContactPoint', json['defaultValueContactPoint']);
        this.defaultValueCount = json['defaultValueCount'] == null ? null : FHIRObjectFactory.buildFromJSON('Count', json['defaultValueCount']);
        this.defaultValueDistance = json['defaultValueDistance'] == null ? null : FHIRObjectFactory.buildFromJSON('Distance', json['defaultValueDistance']);
        this.defaultValueDuration = json['defaultValueDuration'] == null ? null : FHIRObjectFactory.buildFromJSON('Duration', json['defaultValueDuration']);
        this.defaultValueHumanName = json['defaultValueHumanName'] == null ? null : FHIRObjectFactory.buildFromJSON('HumanName', json['defaultValueHumanName']);
        this.defaultValueIdentifier = json['defaultValueIdentifier'] == null ? null : FHIRObjectFactory.buildFromJSON('Identifier', json['defaultValueIdentifier']);
        this.defaultValueMoney = json['defaultValueMoney'] == null ? null : FHIRObjectFactory.buildFromJSON('Money', json['defaultValueMoney']);
        this.defaultValuePeriod = json['defaultValuePeriod'] == null ? null : FHIRObjectFactory.buildFromJSON('Period', json['defaultValuePeriod']);
        this.defaultValueQuantity = json['defaultValueQuantity'] == null ? null : FHIRObjectFactory.buildFromJSON('Quantity', json['defaultValueQuantity']);
        this.defaultValueRange = json['defaultValueRange'] == null ? null : FHIRObjectFactory.buildFromJSON('Range', json['defaultValueRange']);
        this.defaultValueRatio = json['defaultValueRatio'] == null ? null : FHIRObjectFactory.buildFromJSON('Ratio', json['defaultValueRatio']);
        this.defaultValueReference = json['defaultValueReference'] == null ? null : FHIRObjectFactory.buildFromJSON('Reference', json['defaultValueReference']);
        this.defaultValueSampledData = json['defaultValueSampledData'] == null ? null : FHIRObjectFactory.buildFromJSON('SampledData', json['defaultValueSampledData']);
        this.defaultValueSignature = json['defaultValueSignature'] == null ? null : FHIRObjectFactory.buildFromJSON('Signature', json['defaultValueSignature']);
        this.defaultValueTiming = json['defaultValueTiming'] == null ? null : FHIRObjectFactory.buildFromJSON('Timing', json['defaultValueTiming']);
        this.defaultValueContactDetail = json['defaultValueContactDetail'] == null ? null : FHIRObjectFactory.buildFromJSON('ContactDetail', json['defaultValueContactDetail']);
        this.defaultValueContributor = json['defaultValueContributor'] == null ? null : FHIRObjectFactory.buildFromJSON('Contributor', json['defaultValueContributor']);
        this.defaultValueDataRequirement = json['defaultValueDataRequirement'] == null ? null : FHIRObjectFactory.buildFromJSON('DataRequirement', json['defaultValueDataRequirement']);
        this.defaultValueExpression = json['defaultValueExpression'] == null ? null : FHIRObjectFactory.buildFromJSON('Expression', json['defaultValueExpression']);
        this.defaultValueParameterDefinition = json['defaultValueParameterDefinition'] == null ? null : FHIRObjectFactory.buildFromJSON('ParameterDefinition', json['defaultValueParameterDefinition']);
        this.defaultValueRelatedArtifact = json['defaultValueRelatedArtifact'] == null ? null : FHIRObjectFactory.buildFromJSON('RelatedArtifact', json['defaultValueRelatedArtifact']);
        this.defaultValueTriggerDefinition = json['defaultValueTriggerDefinition'] == null ? null : FHIRObjectFactory.buildFromJSON('TriggerDefinition', json['defaultValueTriggerDefinition']);
        this.defaultValueUsageContext = json['defaultValueUsageContext'] == null ? null : FHIRObjectFactory.buildFromJSON('UsageContext', json['defaultValueUsageContext']);
        this.defaultValueDosage = json['defaultValueDosage'] == null ? null : FHIRObjectFactory.buildFromJSON('Dosage', json['defaultValueDosage']);
        this.meaningWhenMissing = json['meaningWhenMissing'];
        this.extMeaningWhenMissing = json['_meaningWhenMissing'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_meaningWhenMissing']);
        this.orderMeaning = json['orderMeaning'];
        this.extOrderMeaning = json['_orderMeaning'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_orderMeaning']);
        this.extFixedBase64Binary = json['_fixedBase64Binary'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedBase64Binary']);
        this.extFixedBoolean = json['_fixedBoolean'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedBoolean']);
        this.extFixedCanonical = json['_fixedCanonical'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedCanonical']);
        this.extFixedCode = json['_fixedCode'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedCode']);
        this.extFixedDate = json['_fixedDate'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedDate']);
        this.extFixedDateTime = json['_fixedDateTime'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedDateTime']);
        this.extFixedDecimal = json['_fixedDecimal'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedDecimal']);
        this.extFixedId = json['_fixedId'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedId']);
        this.extFixedInstant = json['_fixedInstant'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedInstant']);
        this.extFixedInteger = json['_fixedInteger'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedInteger']);
        this.extFixedMarkdown = json['_fixedMarkdown'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedMarkdown']);
        this.extFixedOid = json['_fixedOid'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedOid']);
        this.extFixedPositiveInt = json['_fixedPositiveInt'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedPositiveInt']);
        this.extFixedString = json['_fixedString'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedString']);
        this.extFixedTime = json['_fixedTime'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedTime']);
        this.extFixedUnsignedInt = json['_fixedUnsignedInt'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedUnsignedInt']);
        this.extFixedUri = json['_fixedUri'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedUri']);
        this.extFixedUrl = json['_fixedUrl'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedUrl']);
        this.extFixedUuid = json['_fixedUuid'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_fixedUuid']);
        this.fixedAddress = json['fixedAddress'] == null ? null : FHIRObjectFactory.buildFromJSON('Address', json['fixedAddress']);
        this.fixedAge = json['fixedAge'] == null ? null : FHIRObjectFactory.buildFromJSON('Age', json['fixedAge']);
        this.fixedAnnotation = json['fixedAnnotation'] == null ? null : FHIRObjectFactory.buildFromJSON('Annotation', json['fixedAnnotation']);
        this.fixedAttachment = json['fixedAttachment'] == null ? null : FHIRObjectFactory.buildFromJSON('Attachment', json['fixedAttachment']);
        this.fixedCodeableConcept = json['fixedCodeableConcept'] == null ? null : FHIRObjectFactory.buildFromJSON('CodeableConcept', json['fixedCodeableConcept']);
        this.fixedCoding = json['fixedCoding'] == null ? null : FHIRObjectFactory.buildFromJSON('Coding', json['fixedCoding']);
        this.fixedContactPoint = json['fixedContactPoint'] == null ? null : FHIRObjectFactory.buildFromJSON('ContactPoint', json['fixedContactPoint']);
        this.fixedCount = json['fixedCount'] == null ? null : FHIRObjectFactory.buildFromJSON('Count', json['fixedCount']);
        this.fixedDistance = json['fixedDistance'] == null ? null : FHIRObjectFactory.buildFromJSON('Distance', json['fixedDistance']);
        this.fixedDuration = json['fixedDuration'] == null ? null : FHIRObjectFactory.buildFromJSON('Duration', json['fixedDuration']);
        this.fixedHumanName = json['fixedHumanName'] == null ? null : FHIRObjectFactory.buildFromJSON('HumanName', json['fixedHumanName']);
        this.fixedIdentifier = json['fixedIdentifier'] == null ? null : FHIRObjectFactory.buildFromJSON('Identifier', json['fixedIdentifier']);
        this.fixedMoney = json['fixedMoney'] == null ? null : FHIRObjectFactory.buildFromJSON('Money', json['fixedMoney']);
        this.fixedPeriod = json['fixedPeriod'] == null ? null : FHIRObjectFactory.buildFromJSON('Period', json['fixedPeriod']);
        this.fixedQuantity = json['fixedQuantity'] == null ? null : FHIRObjectFactory.buildFromJSON('Quantity', json['fixedQuantity']);
        this.fixedRange = json['fixedRange'] == null ? null : FHIRObjectFactory.buildFromJSON('Range', json['fixedRange']);
        this.fixedRatio = json['fixedRatio'] == null ? null : FHIRObjectFactory.buildFromJSON('Ratio', json['fixedRatio']);
        this.fixedReference = json['fixedReference'] == null ? null : FHIRObjectFactory.buildFromJSON('Reference', json['fixedReference']);
        this.fixedSampledData = json['fixedSampledData'] == null ? null : FHIRObjectFactory.buildFromJSON('SampledData', json['fixedSampledData']);
        this.fixedSignature = json['fixedSignature'] == null ? null : FHIRObjectFactory.buildFromJSON('Signature', json['fixedSignature']);
        this.fixedTiming = json['fixedTiming'] == null ? null : FHIRObjectFactory.buildFromJSON('Timing', json['fixedTiming']);
        this.fixedContactDetail = json['fixedContactDetail'] == null ? null : FHIRObjectFactory.buildFromJSON('ContactDetail', json['fixedContactDetail']);
        this.fixedContributor = json['fixedContributor'] == null ? null : FHIRObjectFactory.buildFromJSON('Contributor', json['fixedContributor']);
        this.fixedDataRequirement = json['fixedDataRequirement'] == null ? null : FHIRObjectFactory.buildFromJSON('DataRequirement', json['fixedDataRequirement']);
        this.fixedExpression = json['fixedExpression'] == null ? null : FHIRObjectFactory.buildFromJSON('Expression', json['fixedExpression']);
        this.fixedParameterDefinition = json['fixedParameterDefinition'] == null ? null : FHIRObjectFactory.buildFromJSON('ParameterDefinition', json['fixedParameterDefinition']);
        this.fixedRelatedArtifact = json['fixedRelatedArtifact'] == null ? null : FHIRObjectFactory.buildFromJSON('RelatedArtifact', json['fixedRelatedArtifact']);
        this.fixedTriggerDefinition = json['fixedTriggerDefinition'] == null ? null : FHIRObjectFactory.buildFromJSON('TriggerDefinition', json['fixedTriggerDefinition']);
        this.fixedUsageContext = json['fixedUsageContext'] == null ? null : FHIRObjectFactory.buildFromJSON('UsageContext', json['fixedUsageContext']);
        this.fixedDosage = json['fixedDosage'] == null ? null : FHIRObjectFactory.buildFromJSON('Dosage', json['fixedDosage']);
        this.extPatternBase64Binary = json['_patternBase64Binary'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternBase64Binary']);
        this.extPatternBoolean = json['_patternBoolean'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternBoolean']);
        this.extPatternCanonical = json['_patternCanonical'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternCanonical']);
        this.extPatternCode = json['_patternCode'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternCode']);
        this.extPatternDate = json['_patternDate'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternDate']);
        this.extPatternDateTime = json['_patternDateTime'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternDateTime']);
        this.extPatternDecimal = json['_patternDecimal'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternDecimal']);
        this.extPatternId = json['_patternId'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternId']);
        this.extPatternInstant = json['_patternInstant'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternInstant']);
        this.extPatternInteger = json['_patternInteger'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternInteger']);
        this.extPatternMarkdown = json['_patternMarkdown'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternMarkdown']);
        this.extPatternOid = json['_patternOid'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternOid']);
        this.extPatternPositiveInt = json['_patternPositiveInt'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternPositiveInt']);
        this.extPatternString = json['_patternString'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternString']);
        this.extPatternTime = json['_patternTime'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternTime']);
        this.extPatternUnsignedInt = json['_patternUnsignedInt'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternUnsignedInt']);
        this.extPatternUri = json['_patternUri'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternUri']);
        this.extPatternUrl = json['_patternUrl'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternUrl']);
        this.extPatternUuid = json['_patternUuid'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_patternUuid']);
        this.patternAddress = json['patternAddress'] == null ? null : FHIRObjectFactory.buildFromJSON('Address', json['patternAddress']);
        this.patternAge = json['patternAge'] == null ? null : FHIRObjectFactory.buildFromJSON('Age', json['patternAge']);
        this.patternAnnotation = json['patternAnnotation'] == null ? null : FHIRObjectFactory.buildFromJSON('Annotation', json['patternAnnotation']);
        this.patternAttachment = json['patternAttachment'] == null ? null : FHIRObjectFactory.buildFromJSON('Attachment', json['patternAttachment']);
        this.patternCodeableConcept = json['patternCodeableConcept'] == null ? null : FHIRObjectFactory.buildFromJSON('CodeableConcept', json['patternCodeableConcept']);
        this.patternCoding = json['patternCoding'] == null ? null : FHIRObjectFactory.buildFromJSON('Coding', json['patternCoding']);
        this.patternContactPoint = json['patternContactPoint'] == null ? null : FHIRObjectFactory.buildFromJSON('ContactPoint', json['patternContactPoint']);
        this.patternCount = json['patternCount'] == null ? null : FHIRObjectFactory.buildFromJSON('Count', json['patternCount']);
        this.patternDistance = json['patternDistance'] == null ? null : FHIRObjectFactory.buildFromJSON('Distance', json['patternDistance']);
        this.patternDuration = json['patternDuration'] == null ? null : FHIRObjectFactory.buildFromJSON('Duration', json['patternDuration']);
        this.patternHumanName = json['patternHumanName'] == null ? null : FHIRObjectFactory.buildFromJSON('HumanName', json['patternHumanName']);
        this.patternIdentifier = json['patternIdentifier'] == null ? null : FHIRObjectFactory.buildFromJSON('Identifier', json['patternIdentifier']);
        this.patternMoney = json['patternMoney'] == null ? null : FHIRObjectFactory.buildFromJSON('Money', json['patternMoney']);
        this.patternPeriod = json['patternPeriod'] == null ? null : FHIRObjectFactory.buildFromJSON('Period', json['patternPeriod']);
        this.patternQuantity = json['patternQuantity'] == null ? null : FHIRObjectFactory.buildFromJSON('Quantity', json['patternQuantity']);
        this.patternRange = json['patternRange'] == null ? null : FHIRObjectFactory.buildFromJSON('Range', json['patternRange']);
        this.patternRatio = json['patternRatio'] == null ? null : FHIRObjectFactory.buildFromJSON('Ratio', json['patternRatio']);
        this.patternReference = json['patternReference'] == null ? null : FHIRObjectFactory.buildFromJSON('Reference', json['patternReference']);
        this.patternSampledData = json['patternSampledData'] == null ? null : FHIRObjectFactory.buildFromJSON('SampledData', json['patternSampledData']);
        this.patternSignature = json['patternSignature'] == null ? null : FHIRObjectFactory.buildFromJSON('Signature', json['patternSignature']);
        this.patternTiming = json['patternTiming'] == null ? null : FHIRObjectFactory.buildFromJSON('Timing', json['patternTiming']);
        this.patternContactDetail = json['patternContactDetail'] == null ? null : FHIRObjectFactory.buildFromJSON('ContactDetail', json['patternContactDetail']);
        this.patternContributor = json['patternContributor'] == null ? null : FHIRObjectFactory.buildFromJSON('Contributor', json['patternContributor']);
        this.patternDataRequirement = json['patternDataRequirement'] == null ? null : FHIRObjectFactory.buildFromJSON('DataRequirement', json['patternDataRequirement']);
        this.patternExpression = json['patternExpression'] == null ? null : FHIRObjectFactory.buildFromJSON('Expression', json['patternExpression']);
        this.patternParameterDefinition = json['patternParameterDefinition'] == null ? null : FHIRObjectFactory.buildFromJSON('ParameterDefinition', json['patternParameterDefinition']);
        this.patternRelatedArtifact = json['patternRelatedArtifact'] == null ? null : FHIRObjectFactory.buildFromJSON('RelatedArtifact', json['patternRelatedArtifact']);
        this.patternTriggerDefinition = json['patternTriggerDefinition'] == null ? null : FHIRObjectFactory.buildFromJSON('TriggerDefinition', json['patternTriggerDefinition']);
        this.patternUsageContext = json['patternUsageContext'] == null ? null : FHIRObjectFactory.buildFromJSON('UsageContext', json['patternUsageContext']);
        this.patternDosage = json['patternDosage'] == null ? null : FHIRObjectFactory.buildFromJSON('Dosage', json['patternDosage']);
        this.example = List<ElementDefinitionExample>();
        if (json['example'] != null && json['example'].length > 0) {
          if( json['example'] is List ){
            json['example'].forEach((i){
              this.example.add(FHIRObjectFactory.buildFromJSON('ElementDefinitionExample', i));
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['example'];
            this.example.add(FHIRObjectFactory.buildFromJSON('ElementDefinitionExample', i));
          }          
        }
        this.extMinValueDate = json['_minValueDate'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_minValueDate']);
        this.extMinValueDateTime = json['_minValueDateTime'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_minValueDateTime']);
        this.extMinValueInstant = json['_minValueInstant'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_minValueInstant']);
        this.extMinValueTime = json['_minValueTime'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_minValueTime']);
        this.extMinValueDecimal = json['_minValueDecimal'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_minValueDecimal']);
        this.extMinValueInteger = json['_minValueInteger'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_minValueInteger']);
        this.extMinValuePositiveInt = json['_minValuePositiveInt'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_minValuePositiveInt']);
        this.extMinValueUnsignedInt = json['_minValueUnsignedInt'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_minValueUnsignedInt']);
        this.minValueQuantity = json['minValueQuantity'] == null ? null : FHIRObjectFactory.buildFromJSON('Quantity', json['minValueQuantity']);
        this.extMaxValueDate = json['_maxValueDate'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_maxValueDate']);
        this.extMaxValueDateTime = json['_maxValueDateTime'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_maxValueDateTime']);
        this.extMaxValueInstant = json['_maxValueInstant'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_maxValueInstant']);
        this.extMaxValueTime = json['_maxValueTime'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_maxValueTime']);
        this.extMaxValueDecimal = json['_maxValueDecimal'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_maxValueDecimal']);
        this.extMaxValueInteger = json['_maxValueInteger'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_maxValueInteger']);
        this.extMaxValuePositiveInt = json['_maxValuePositiveInt'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_maxValuePositiveInt']);
        this.extMaxValueUnsignedInt = json['_maxValueUnsignedInt'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_maxValueUnsignedInt']);
        this.maxValueQuantity = json['maxValueQuantity'] == null ? null : FHIRObjectFactory.buildFromJSON('Quantity', json['maxValueQuantity']);
        this.maxLength = json['maxLength'];
        this.extMaxLength = json['_maxLength'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_maxLength']);
        this.condition = List<String>();
        if (json['condition'] != null && json['condition'].length > 0) {
          if( json['condition'] is List ){
            json['condition'].forEach((i){
              this.condition.add(i);
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['condition'];
            this.condition.add(i);
          }          
        }
        this.extCondition = List<Element>();
        if (json['_condition'] != null && json['_condition'].length > 0) {
          if( json['_condition'] is List ){
            json['_condition'].forEach((i){
              this.extCondition.add(FHIRObjectFactory.buildFromJSON('Element', i));
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['_condition'];
            this.extCondition.add(FHIRObjectFactory.buildFromJSON('Element', i));
          }          
        }
        this.constraint = List<ElementDefinitionConstraint>();
        if (json['constraint'] != null && json['constraint'].length > 0) {
          if( json['constraint'] is List ){
            json['constraint'].forEach((i){
              this.constraint.add(FHIRObjectFactory.buildFromJSON('ElementDefinitionConstraint', i));
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['constraint'];
            this.constraint.add(FHIRObjectFactory.buildFromJSON('ElementDefinitionConstraint', i));
          }          
        }
        this.mustSupport = json['mustSupport'];
        this.extMustSupport = json['_mustSupport'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_mustSupport']);
        this.isModifier = json['isModifier'];
        this.extIsModifier = json['_isModifier'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_isModifier']);
        this.isModifierReason = json['isModifierReason'];
        this.extIsModifierReason = json['_isModifierReason'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_isModifierReason']);
        this.isSummary = json['isSummary'];
        this.extIsSummary = json['_isSummary'] == null ? null : FHIRObjectFactory.buildFromJSON('Element', json['_isSummary']);
        this.binding = json['binding'] == null ? null : FHIRObjectFactory.buildFromJSON('ElementDefinitionBinding', json['binding']);
        this.mapping = List<ElementDefinitionMapping>();
        if (json['mapping'] != null && json['mapping'].length > 0) {
          if( json['mapping'] is List ){
            json['mapping'].forEach((i){
              this.mapping.add(FHIRObjectFactory.buildFromJSON('ElementDefinitionMapping', i));
            });
          } else {
            // this handles the case when the list only has one object and does not return as a list
            var i = json['mapping'];
            this.mapping.add(FHIRObjectFactory.buildFromJSON('ElementDefinitionMapping', i));
          }          
        }
    }
}
